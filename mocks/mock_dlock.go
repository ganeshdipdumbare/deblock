// Code generated by MockGen. DO NOT EDIT.
// Source: dlock.go
//
// Generated by this command:
//
//	mockgen -source=dlock.go -destination=../../mocks/mock_dlock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDistributedLock is a mock of DistributedLock interface.
type MockDistributedLock struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedLockMockRecorder
	isgomock struct{}
}

// MockDistributedLockMockRecorder is the mock recorder for MockDistributedLock.
type MockDistributedLockMockRecorder struct {
	mock *MockDistributedLock
}

// NewMockDistributedLock creates a new mock instance.
func NewMockDistributedLock(ctrl *gomock.Controller) *MockDistributedLock {
	mock := &MockDistributedLock{ctrl: ctrl}
	mock.recorder = &MockDistributedLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedLock) EXPECT() *MockDistributedLockMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockDistributedLock) Lock(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockDistributedLockMockRecorder) Lock(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockDistributedLock)(nil).Lock), ctx, key)
}

// Unlock mocks base method.
func (m *MockDistributedLock) Unlock(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockDistributedLockMockRecorder) Unlock(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockDistributedLock)(nil).Unlock), ctx, key)
}
