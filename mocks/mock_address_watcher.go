// Code generated by MockGen. DO NOT EDIT.
// Source: address_watcher.go
//
// Generated by this command:
//
//	mockgen -source=address_watcher.go -destination=../../mocks/mock_address_watcher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
	isgomock struct{}
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// AddAddresses mocks base method.
func (m *MockWatcher) AddAddresses(ctx context.Context, addresses []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddresses", ctx, addresses)
}

// AddAddresses indicates an expected call of AddAddresses.
func (mr *MockWatcherMockRecorder) AddAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddresses", reflect.TypeOf((*MockWatcher)(nil).AddAddresses), ctx, addresses)
}

// GetWatchedAddresses mocks base method.
func (m *MockWatcher) GetWatchedAddresses(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchedAddresses", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetWatchedAddresses indicates an expected call of GetWatchedAddresses.
func (mr *MockWatcherMockRecorder) GetWatchedAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchedAddresses", reflect.TypeOf((*MockWatcher)(nil).GetWatchedAddresses), ctx)
}

// IsWatched mocks base method.
func (m *MockWatcher) IsWatched(ctx context.Context, address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWatched", ctx, address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWatched indicates an expected call of IsWatched.
func (mr *MockWatcherMockRecorder) IsWatched(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWatched", reflect.TypeOf((*MockWatcher)(nil).IsWatched), ctx, address)
}

// RemoveAddresses mocks base method.
func (m *MockWatcher) RemoveAddresses(ctx context.Context, addresses []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveAddresses", ctx, addresses)
}

// RemoveAddresses indicates an expected call of RemoveAddresses.
func (mr *MockWatcherMockRecorder) RemoveAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAddresses", reflect.TypeOf((*MockWatcher)(nil).RemoveAddresses), ctx, addresses)
}
