// Code generated by MockGen. DO NOT EDIT.
// Source: blockchain.go
//
// Generated by this command:
//
//	mockgen -source=blockchain.go -destination=../../mocks/mock_blockchain.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	blockchain "deblock/internal/blockchain"
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), ctx)
}

// GetBlockByNumber mocks base method.
func (m *MockClient) GetBlockByNumber(ctx context.Context, number *big.Int) (*blockchain.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, number)
	ret0, _ := ret[0].(*blockchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockClientMockRecorder) GetBlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockClient)(nil).GetBlockByNumber), ctx, number)
}

// GetTransactionReceipt mocks base method.
func (m *MockClient) GetTransactionReceipt(ctx context.Context, txHash string) (*blockchain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", ctx, txHash)
	ret0, _ := ret[0].(*blockchain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt.
func (mr *MockClientMockRecorder) GetTransactionReceipt(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockClient)(nil).GetTransactionReceipt), ctx, txHash)
}

// SubscribeToBlocks mocks base method.
func (m *MockClient) SubscribeToBlocks(ctx context.Context) (<-chan blockchain.Block, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToBlocks", ctx)
	ret0, _ := ret[0].(<-chan blockchain.Block)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// SubscribeToBlocks indicates an expected call of SubscribeToBlocks.
func (mr *MockClientMockRecorder) SubscribeToBlocks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToBlocks", reflect.TypeOf((*MockClient)(nil).SubscribeToBlocks), ctx)
}
