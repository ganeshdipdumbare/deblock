// Code generated by MockGen. DO NOT EDIT.
// Source: txmonitor_service.go
//
// Generated by this command:
//
//	mockgen -source=txmonitor_service.go -destination=../../mocks/mock_txmonitor_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTxMonitorService is a mock of TxMonitorService interface.
type MockTxMonitorService struct {
	ctrl     *gomock.Controller
	recorder *MockTxMonitorServiceMockRecorder
	isgomock struct{}
}

// MockTxMonitorServiceMockRecorder is the mock recorder for MockTxMonitorService.
type MockTxMonitorServiceMockRecorder struct {
	mock *MockTxMonitorService
}

// NewMockTxMonitorService creates a new mock instance.
func NewMockTxMonitorService(ctrl *gomock.Controller) *MockTxMonitorService {
	mock := &MockTxMonitorService{ctrl: ctrl}
	mock.recorder = &MockTxMonitorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxMonitorService) EXPECT() *MockTxMonitorServiceMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockTxMonitorService) IsRunning(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockTxMonitorServiceMockRecorder) IsRunning(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockTxMonitorService)(nil).IsRunning), ctx)
}

// Start mocks base method.
func (m *MockTxMonitorService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTxMonitorServiceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTxMonitorService)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockTxMonitorService) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTxMonitorServiceMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTxMonitorService)(nil).Stop), ctx)
}
